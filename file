-- New Luau Script
-- Created on 1/6/2025

-- ═══════════════════════════════════════════════════════════════
-- NOVA UI LIBRARY v2.0
-- Easy-to-use UI Library for Roblox
-- Similar to Orion Library structure
-- ═══════════════════════════════════════════════════════════════

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

-- Library Table
local NovaLib = {}

-- Default Configuration
local DEFAULT_CONFIG = {
    Name = "Nova UI",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "NovaConfigs",
    IntroEnabled = true,
    IntroText = "Nova UI Library",
    IntroIcon = "",
    Icon = "",
    CloseCallback = function() end
}

-- Color Scheme
local COLORS = {
    MAIN_BG = Color3.fromRGB(25, 25, 35),
    HEADER_BG = Color3.fromRGB(35, 35, 50),
    SIDE_PANEL = Color3.fromRGB(30, 30, 42),
    CONTENT_BG = Color3.fromRGB(25, 25, 35),
    ACCENT = Color3.fromRGB(88, 101, 242),
    ACCENT_HOVER = Color3.fromRGB(98, 111, 252),
    SUCCESS = Color3.fromRGB(67, 181, 129),
    DANGER = Color3.fromRGB(237, 66, 69),
    TEXT_PRIMARY = Color3.fromRGB(255, 255, 255),
    TEXT_SECONDARY = Color3.fromRGB(220, 221, 222),
    TEXT_MUTED = Color3.fromRGB(114, 118, 125),
    INPUT_BG = Color3.fromRGB(40, 43, 48),
    SEPARATOR = Color3.fromRGB(47, 49, 54),
    BUTTON_INACTIVE = Color3.fromRGB(47, 49, 54)
}

-- Utility Functions
local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = parent
    return corner
end

local function createPadding(parent, padding)
    local pad = Instance.new("UIPadding")
    if type(padding) == "table" then
        pad.PaddingTop = UDim.new(0, padding.top or 0)
        pad.PaddingBottom = UDim.new(0, padding.bottom or 0)
        pad.PaddingLeft = UDim.new(0, padding.left or 0)
        pad.PaddingRight = UDim.new(0, padding.right or 0)
    else
        pad.PaddingTop = UDim.new(0, padding)
        pad.PaddingBottom = UDim.new(0, padding)
        pad.PaddingLeft = UDim.new(0, padding)
        pad.PaddingRight = UDim.new(0, padding)
    end
    pad.Parent = parent
    return pad
end

-- Create Notification System
local function createNotification(title, message, duration)
    duration = duration or 3
    
    local screenGui = player:FindFirstChild("PlayerGui"):FindFirstChild("NovaNotifications")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "NovaNotifications"
        screenGui.Parent = player.PlayerGui
        screenGui.ResetOnSpawn = false
    end
    
    local notifFrame = Instance.new("Frame")
    notifFrame.Name = "Notification"
    notifFrame.Size = UDim2.new(0, 280, 0, 60)
    notifFrame.Position = UDim2.new(1, 300, 1, -80 - (#screenGui:GetChildren() * 70))
    notifFrame.BackgroundColor3 = COLORS.MAIN_BG
    notifFrame.BorderSizePixel = 0
    notifFrame.Parent = screenGui
    
    createCorner(notifFrame, 8)
    
    local notifBorder = Instance.new("Frame")
    notifBorder.Size = UDim2.new(0, 4, 1, 0)
    notifBorder.Position = UDim2.new(0, 0, 0, 0)
    notifBorder.BackgroundColor3 = COLORS.ACCENT
    notifBorder.BorderSizePixel = 0
    notifBorder.Parent = notifFrame
    createCorner(notifBorder, 8)
    
    local notifTitle = Instance.new("TextLabel")
    notifTitle.Size = UDim2.new(1, -15, 0, 20)
    notifTitle.Position = UDim2.new(0, 10, 0, 8)
    notifTitle.BackgroundTransparency = 1
    notifTitle.Text = title
    notifTitle.TextColor3 = COLORS.TEXT_PRIMARY
    notifTitle.TextSize = 12
    notifTitle.TextXAlignment = Enum.TextXAlignment.Left
    notifTitle.Font = Enum.Font.GothamBold
    notifTitle.Parent = notifFrame
    
    local notifMessage = Instance.new("TextLabel")
    notifMessage.Size = UDim2.new(1, -15, 0, 25)
    notifMessage.Position = UDim2.new(0, 10, 0, 25)
    notifMessage.BackgroundTransparency = 1
    notifMessage.Text = message
    notifMessage.TextColor3 = COLORS.TEXT_SECONDARY
    notifMessage.TextSize = 10
    notifMessage.TextXAlignment = Enum.TextXAlignment.Left
    notifMessage.TextWrapped = true
    notifMessage.Font = Enum.Font.Gotham
    notifMessage.Parent = notifFrame
    
    TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
        Position = UDim2.new(1, -290, 1, -80 - (#screenGui:GetChildren() * 70))
    }):Play()
    
    spawn(function()
        wait(duration)
        TweenService:Create(notifFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            Position = UDim2.new(1, 300, 1, -80)
        }):Play()
        wait(0.3)
        notifFrame:Destroy()
    end)
end

-- Main Library Functions
function NovaLib:MakeWindow(options)
    options = options or {}
    
    -- Merge with default config
    local config = {}
    for k, v in pairs(DEFAULT_CONFIG) do
        config[k] = options[k] or v
    end
    
    -- Create main ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = config.Name or "NovaUI"
    screenGui.Parent = player.PlayerGui
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 400, 0, 280)  -- Reduced from 550x380
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -140)
    mainFrame.BackgroundColor3 = COLORS.MAIN_BG
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    createCorner(mainFrame, 12)
    
    -- Header Bar
    local headerBar = Instance.new("Frame")
    headerBar.Name = "HeaderBar"
    headerBar.Size = UDim2.new(1, 0, 0, 28)
    headerBar.Position = UDim2.new(0, 0, 0, 0)
    headerBar.BackgroundColor3 = COLORS.HEADER_BG
    headerBar.BorderSizePixel = 0
    headerBar.Parent = mainFrame
    createCorner(headerBar, 12)
    
    local headerFix = Instance.new("Frame")
    headerFix.Size = UDim2.new(1, 0, 0, 12)
    headerFix.Position = UDim2.new(0, 0, 1, -12)
    headerFix.BackgroundColor3 = COLORS.HEADER_BG
    headerFix.BorderSizePixel = 0
    headerFix.Parent = headerBar
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(0, 200, 1, 0)
    titleLabel.Position = UDim2.new(0, 15, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = config.Name
    titleLabel.TextColor3 = COLORS.TEXT_PRIMARY
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = headerBar
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 28, 0, 20)
    closeButton.Position = UDim2.new(1, -38, 0.5, -10)
    closeButton.BackgroundColor3 = COLORS.DANGER
    closeButton.BorderSizePixel = 0
    closeButton.Text = "×"
    closeButton.TextColor3 = COLORS.TEXT_PRIMARY
    closeButton.TextSize = 14
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = headerBar
    createCorner(closeButton, 6)
    
    -- Side Panel
    local sidePanel = Instance.new("Frame")
    sidePanel.Name = "SidePanel"
    sidePanel.Size = UDim2.new(0, 100, 1, -28)
    sidePanel.Position = UDim2.new(0, 0, 0, 35)
    sidePanel.BackgroundColor3 = COLORS.SIDE_PANEL
    sidePanel.BorderSizePixel = 0
    sidePanel.Parent = mainFrame
    
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(0, 1, 1, 0)
    separator.Position = UDim2.new(1, 0, 0, 0)
    separator.BackgroundColor3 = COLORS.SEPARATOR
    separator.BorderSizePixel = 0
    separator.Parent = sidePanel
    
    -- Navigation Container
    local navContainer = Instance.new("ScrollingFrame")
    navContainer.Name = "NavContainer"
    navContainer.Size = UDim2.new(1, -10, 1, -15)
    navContainer.Position = UDim2.new(0, 5, 0, 10)
    navContainer.BackgroundTransparency = 1
    navContainer.BorderSizePixel = 0
    navContainer.ScrollBarThickness = 3
    navContainer.ScrollBarImageColor3 = COLORS.SEPARATOR
    navContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    navContainer.Parent = sidePanel
    
    local navLayout = Instance.new("UIListLayout")
    navLayout.FillDirection = Enum.FillDirection.Vertical
    navLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    navLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    navLayout.Padding = UDim.new(0, 4)
    navLayout.Parent = navContainer
    
    -- Content Area
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -100, 1, -28)
    contentFrame.Position = UDim2.new(0, 100, 0, 28)
    contentFrame.BackgroundColor3 = COLORS.CONTENT_BG
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame
    
    local pagesContainer = Instance.new("Frame")
    pagesContainer.Name = "PagesContainer"
    pagesContainer.Size = UDim2.new(1, -16, 1, -16)
    pagesContainer.Position = UDim2.new(0, 8, 0, 8)
    pagesContainer.BackgroundTransparency = 1
    pagesContainer.Parent = contentFrame
    
    -- Window Object
    local Window = {
        _screenGui = screenGui,
        _mainFrame = mainFrame,
        _navContainer = navContainer,
        _navLayout = navLayout,
        _pagesContainer = pagesContainer,
        _tabs = {},
        _currentTab = nil,
        _isMinimized = false,
        _config = config
    }
    
    -- Dragging functionality
    local dragToggle = nil
    local dragSpeed = 0.25
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        TweenService:Create(mainFrame, TweenInfo.new(dragSpeed), {Position = position}):Play()
    end
    
    headerBar.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            dragToggle = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    headerBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if dragToggle then
                updateInput(input)
            end
        end
    end)
    
    -- Close functionality
    closeButton.MouseButton1Click:Connect(function()
        TweenService:Create(mainFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quart), {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }):Play()
        wait(0.25)
        screenGui:Destroy()
        if config.CloseCallback then
            config.CloseCallback()
        end
    end)
    
    -- Window Methods
    function Window:MakeTab(options)
        options = options or {}
        local tabName = options.Name or "Tab"
        local tabIcon = options.Icon or ""
        local tabPremiumOnly = options.PremiumOnly or false
        
        -- Create nav button
        local navButton = Instance.new("TextButton")
        navButton.Name = tabName .. "Button"
        navButton.Size = UDim2.new(1, -10, 0, 26) 
        navButton.BackgroundColor3 = (#self._tabs == 0) and COLORS.ACCENT or COLORS.BUTTON_INACTIVE
        navButton.BorderSizePixel = 0
        navButton.Text = tabName
        navButton.TextColor3 = COLORS.TEXT_SECONDARY
        navButton.TextSize = 12
        navButton.TextXAlignment = Enum.TextXAlignment.Center
        navButton.Font = Enum.Font.GothamMedium
        navButton.Parent = self._navContainer
        createCorner(navButton, 8)
        
        -- Create tab page
        local tabPage = Instance.new("Frame")
        tabPage.Name = tabName .. "Page"
        tabPage.Size = UDim2.new(1, 0, 1, 0)
        tabPage.BackgroundTransparency = 1
        tabPage.Visible = (#self._tabs == 0)
        tabPage.Parent = self._pagesContainer
        
        -- Page title
        local pageTitle = Instance.new("TextLabel")
        pageTitle.Name = "PageTitle"
        pageTitle.Size = UDim2.new(1, 0, 0, 25)
        pageTitle.BackgroundTransparency = 1
        pageTitle.Text = tabName
        pageTitle.TextColor3 = COLORS.TEXT_PRIMARY
        pageTitle.TextSize = 16
        pageTitle.TextXAlignment = Enum.TextXAlignment.Left
        pageTitle.Font = Enum.Font.GothamBold
        pageTitle.Parent = tabPage
        
        -- Elements container
        local elementsFrame = Instance.new("ScrollingFrame")
        elementsFrame.Name = "ElementsFrame"
        elementsFrame.Size = UDim2.new(1, 0, 1, -30)
        elementsFrame.Position = UDim2.new(0, 0, 0, 30)
        elementsFrame.BackgroundTransparency = 1
        elementsFrame.BorderSizePixel = 0
        elementsFrame.ScrollBarThickness = 3
        elementsFrame.ScrollBarImageColor3 = COLORS.SEPARATOR
        elementsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        elementsFrame.Parent = tabPage
        
        local elementsLayout = Instance.new("UIListLayout")
        elementsLayout.FillDirection = Enum.FillDirection.Vertical
        elementsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        elementsLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        elementsLayout.Padding = UDim.new(0, 8)
        elementsLayout.Parent = elementsFrame
        
        -- Tab object
        local Tab = {
            _window = self,
            _navButton = navButton,
            _tabPage = tabPage,
            _elementsFrame = elementsFrame,
            _elementsLayout = elementsLayout,
            _name = tabName
        }
        
        -- Navigation functionality
        navButton.MouseButton1Click:Connect(function()
            -- Hide all pages
            for _, tab in pairs(self._tabs) do
                tab._tabPage.Visible = false
                TweenService:Create(tab._navButton, TweenInfo.new(0.25), {BackgroundColor3 = COLORS.BUTTON_INACTIVE}):Play()
            end
            
            -- Show selected page
            tabPage.Visible = true
            TweenService:Create(navButton, TweenInfo.new(0.25), {BackgroundColor3 = COLORS.ACCENT}):Play()
            self._currentTab = Tab
        end)
        
        -- Button hover effects
        navButton.MouseEnter:Connect(function()
            if self._currentTab ~= Tab then
                TweenService:Create(navButton, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(60, 63, 70)}):Play()
            end
        end)
        
        navButton.MouseLeave:Connect(function()
            if self._currentTab ~= Tab then
                TweenService:Create(navButton, TweenInfo.new(0.15), {BackgroundColor3 = COLORS.BUTTON_INACTIVE}):Play()
            end
        end)
        
        -- Update canvas size
        elementsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            elementsFrame.CanvasSize = UDim2.new(0, 0, 0, elementsLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Tab Methods
        function Tab:AddButton(options)
            options = options or {}
            local buttonName = options.Name or "Button"
            local buttonCallback = options.Callback or function() end
            
            local button = Instance.new("TextButton")
            button.Name = buttonName
            button.Size = UDim2.new(1, 0, 0, 26)
            button.BackgroundColor3 = COLORS.ACCENT
            button.BorderSizePixel = 0
            button.Text = buttonName
            button.TextColor3 = COLORS.TEXT_PRIMARY
            button.TextSize = 12
            button.Font = Enum.Font.GothamMedium
            button.Parent = self._elementsFrame
            createCorner(button, 6)
            
            -- Hover effects
            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = COLORS.ACCENT_HOVER}):Play()
            end)
            
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = COLORS.ACCENT}):Play()
            end)
            
            button.MouseButton1Click:Connect(function()
                buttonCallback()
            end)
            
            return button
        end
        
        function Tab:AddToggle(options)
            options = options or {}
            local toggleName = options.Name or "Toggle"
            local toggleDefault = options.Default or false
            local toggleCallback = options.Callback or function() end
            
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = toggleName
            toggleFrame.Size = UDim2.new(1, 0, 0, 26)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = self._elementsFrame
            
            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Size = UDim2.new(1, -40, 1, 0)
            toggleLabel.Position = UDim2.new(0, 0, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = toggleName
            toggleLabel.TextColor3 = COLORS.TEXT_SECONDARY
            toggleLabel.TextSize = 12
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.Font = Enum.Font.GothamMedium
            toggleLabel.Parent = toggleFrame
            
            local toggleButton = Instance.new("TextButton")
            toggleButton.Size = UDim2.new(0, 38, 0, 20)
            toggleButton.Position = UDim2.new(1, -38, 0.5, -10)
            toggleButton.BackgroundColor3 = toggleDefault and COLORS.ACCENT or Color3.fromRGB(70, 70, 85)
            toggleButton.BorderSizePixel = 0
            toggleButton.Text = ""
            toggleButton.Parent = toggleFrame
            createCorner(toggleButton, 10)
            
            local toggleCircle = Instance.new("Frame")
            toggleCircle.Size = UDim2.new(0, 16, 0, 16)
            toggleCircle.Position = toggleDefault and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
            toggleCircle.BackgroundColor3 = COLORS.TEXT_PRIMARY
            toggleCircle.BorderSizePixel = 0
            toggleCircle.Parent = toggleButton
            createCorner(toggleCircle, 8)
            
            local isToggled = toggleDefault
            
            toggleButton.MouseButton1Click:Connect(function()
                isToggled = not isToggled
                local bgColor = isToggled and COLORS.ACCENT or Color3.fromRGB(70, 70, 85)
                local circlePos = isToggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = bgColor}):Play()
                TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = circlePos}):Play()
                
                toggleCallback(isToggled)
            end)
            
            return {
                Set = function(value)
                    isToggled = value
                    local bgColor = isToggled and COLORS.ACCENT or Color3.fromRGB(70, 70, 85)
                    local circlePos = isToggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                    
                    TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = bgColor}):Play()
                    TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = circlePos}):Play()
                end
            }
        end
        
        function Tab:AddTextbox(options)
            options = options or {}
            local textboxName = options.Name or "Textbox"
            local textboxDefault = options.Default or ""
            local textboxPlaceholder = options.PlaceholderText or "Enter text..."
            local textboxCallback = options.Callback or function() end
            
            local textBox = Instance.new("TextBox")
            textBox.Name = textboxName
            textBox.Size = UDim2.new(1, 0, 0, 30)
            textBox.BackgroundColor3 = COLORS.INPUT_BG
            textBox.BorderSizePixel = 0
            textBox.Text = textboxDefault
            textBox.TextColor3 = COLORS.TEXT_SECONDARY
            textBox.TextSize = 12
            textBox.Font = Enum.Font.Gotham
            textBox.PlaceholderText = textboxPlaceholder
            textBox.PlaceholderColor3 = COLORS.TEXT_MUTED
            textBox.Parent = self._elementsFrame
            createCorner(textBox, 6)
            createPadding(textBox, {left = 10, right = 10})
            
            textBox.FocusLost:Connect(function()
                textboxCallback(textBox.Text)
            end)
            
            return textBox
        end
        
        function Tab:AddSlider(options)
            options = options or {}
            local sliderName = options.Name or "Slider"
            local sliderMin = options.Min or 0
            local sliderMax = options.Max or 100
            local sliderDefault = options.Default or 50
            local sliderCallback = options.Callback or function() end
            
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = sliderName
            sliderFrame.Size = UDim2.new(1, 0, 0, 34)
            sliderFrame.BackgroundTransparency = 1
            sliderFrame.Parent = self._elementsFrame
            
            local sliderLabel = Instance.new("TextLabel")
            sliderLabel.Size = UDim2.new(0.7, 0, 0, 18)
            sliderLabel.Position = UDim2.new(0, 0, 0, 0)
            sliderLabel.BackgroundTransparency = 1
            sliderLabel.Text = sliderName
            sliderLabel.TextColor3 = COLORS.TEXT_SECONDARY
            sliderLabel.TextSize = 12
            sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            sliderLabel.Font = Enum.Font.GothamMedium
            sliderLabel.Parent = sliderFrame
            
            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0.3, 0, 0, 18)
            valueLabel.Position = UDim2.new(0.7, 0, 0, 0)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(sliderDefault)
            valueLabel.TextColor3 = COLORS.TEXT_MUTED
            valueLabel.TextSize = 12
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right
            valueLabel.Font = Enum.Font.Gotham
            valueLabel.Parent = sliderFrame
            
            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, 0, 0, 6)
            sliderBar.Position = UDim2.new(0, 0, 0, 22)
            sliderBar.BackgroundColor3 = COLORS.INPUT_BG
            sliderBar.BorderSizePixel = 0
            sliderBar.Parent = sliderFrame
            createCorner(sliderBar, 3)
            
            local sliderFill = Instance.new("Frame")
            sliderFill.Size = UDim2.new((sliderDefault - sliderMin) / (sliderMax - sliderMin), 0, 1, 0)
            sliderFill.Position = UDim2.new(0, 0, 0, 0)
            sliderFill.BackgroundColor3 = COLORS.ACCENT
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderBar
            createCorner(sliderFill, 3)
            
            local sliderKnob = Instance.new("Frame")
            sliderKnob.Size = UDim2.new(0, 14, 0, 14)
            sliderKnob.Position = UDim2.new((sliderDefault - sliderMin) / (sliderMax - sliderMin), -7, 0.5, -7)
            sliderKnob.BackgroundColor3 = COLORS.TEXT_PRIMARY
            sliderKnob.BorderSizePixel = 0
            sliderKnob.Parent = sliderBar
            createCorner(sliderKnob, 7)
            
            local dragging = false
            local currentValue = sliderDefault
            
            local function updateSlider(input)
                local pos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                currentValue = math.floor(sliderMin + (pos * (sliderMax - sliderMin)))
                
                TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = UDim2.new(pos, 0, 1, 0)}):Play()
                TweenService:Create(sliderKnob, TweenInfo.new(0.1), {Position = UDim2.new(
pos, -7, 0.5, -7)}):Play()
                
                valueLabel.Text = tostring(currentValue)
                sliderCallback(currentValue)
            end
            
            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input)
                end
            end)
            
            sliderBar.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            return {
                Set = function(value)
                    currentValue = math.clamp(value, sliderMin, sliderMax)
                    local pos = (currentValue - sliderMin) / (sliderMax - sliderMin)
                    
                    TweenService:Create(sliderFill, TweenInfo.new(0.2), {Size = UDim2.new(pos, 0, 1, 0)}):Play()
                    TweenService:Create(sliderKnob, TweenInfo.new(0.2), {Position = UDim2.new(pos, -7, 0.5, -7)}):Play()
                    valueLabel.Text = tostring(currentValue)
                end
            }
        end
        
        function Tab:AddDropdown(options)
            options = options or {}
            local dropdownName = options.Name or "Dropdown"
            local dropdownOptions = options.Options or {"Option 1", "Option 2"}
            local dropdownDefault = options.Default or dropdownOptions[1]
            local dropdownCallback = options.Callback or function() end
            
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Name = dropdownName
            dropdownFrame.Size = UDim2.new(1, 0, 0, 26)
            dropdownFrame.BackgroundTransparency = 1
            dropdownFrame.Parent = self._elementsFrame
            
            local dropdownButton = Instance.new("TextButton")
            dropdownButton.Size = UDim2.new(1, 0, 1, 0)
            dropdownButton.BackgroundColor3 = COLORS.INPUT_BG
            dropdownButton.BorderSizePixel = 0
            dropdownButton.Text = dropdownDefault
            dropdownButton.TextColor3 = COLORS.TEXT_SECONDARY
            dropdownButton.TextSize = 12
            dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
            dropdownButton.Font = Enum.Font.Gotham
            dropdownButton.Parent = dropdownFrame
            createCorner(dropdownButton, 6)
            createPadding(dropdownButton, {left = 10, right = 25})
            
            local dropdownArrow = Instance.new("TextLabel")
            dropdownArrow.Size = UDim2.new(0, 20, 1, 0)
            dropdownArrow.Position = UDim2.new(1, -20, 0, 0)
            dropdownArrow.BackgroundTransparency = 1
            dropdownArrow.Text = "▼"
            dropdownArrow.TextColor3 = COLORS.TEXT_MUTED
            dropdownArrow.TextSize = 10
            dropdownArrow.Font = Enum.Font.Gotham
            dropdownArrow.Parent = dropdownButton
            
            local optionsFrame = Instance.new("Frame")
            optionsFrame.Size = UDim2.new(1, 0, 0, #dropdownOptions * 25)
            optionsFrame.Position = UDim2.new(0, 0, 1, 2)
            optionsFrame.BackgroundColor3 = COLORS.INPUT_BG
            optionsFrame.BorderSizePixel = 0
            optionsFrame.Visible = false
            optionsFrame.Parent = dropdownFrame
            optionsFrame.ZIndex = 10
            createCorner(optionsFrame, 6)
            
            local optionsLayout = Instance.new("UIListLayout")
            optionsLayout.FillDirection = Enum.FillDirection.Vertical
            optionsLayout.Parent = optionsFrame
            
            local isOpen = false
            local currentValue = dropdownDefault
            
            for _, option in pairs(dropdownOptions) do
                local optionButton = Instance.new("TextButton")
                optionButton.Size = UDim2.new(1, 0, 0, 25)
                optionButton.BackgroundTransparency = 1
                optionButton.Text = option
                optionButton.TextColor3 = COLORS.TEXT_SECONDARY
                optionButton.TextSize = 12
                optionButton.TextXAlignment = Enum.TextXAlignment.Left
                optionButton.Font = Enum.Font.Gotham
                optionButton.Parent = optionsFrame
                createPadding(optionButton, {left = 10})
                
                optionButton.MouseEnter:Connect(function()
                    optionButton.BackgroundTransparency = 0.9
                    optionButton.BackgroundColor3 = COLORS.ACCENT
                end)
                
                optionButton.MouseLeave:Connect(function()
                    optionButton.BackgroundTransparency = 1
                end)
                
                optionButton.MouseButton1Click:Connect(function()
                    currentValue = option
                    dropdownButton.Text = option
                    optionsFrame.Visible = false
                    isOpen = false
                    TweenService:Create(dropdownArrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
                    dropdownCallback(option)
                end)
            end
            
            dropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                optionsFrame.Visible = isOpen
                TweenService:Create(dropdownArrow, TweenInfo.new(0.2), {Rotation = isOpen and 180 or 0}):Play()
                
                if isOpen then
                    dropdownFrame.Size = UDim2.new(1, 0, 0, 30 + #dropdownOptions * 25)
                else
                    dropdownFrame.Size = UDim2.new(1, 0, 0, 30)
                end
            end)
            
            return {
                Set = function(value)
                    if table.find(dropdownOptions, value) then
                        currentValue = value
                        dropdownButton.Text = value
                    end
                end,
                Add = function(option)
                    table.insert(dropdownOptions, option)
                    -- Recreate options (simplified for brevity)
                end,
                Remove = function(option)
                    local index = table.find(dropdownOptions, option)
                    if index then
                        table.remove(dropdownOptions, index)
                    end
                end
            }
        end
        
        function Tab:AddLabel(options)
            options = options or {}
            local labelText = options.Text or "Label"
            
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.Text = labelText
            label.TextColor3 = COLORS.TEXT_SECONDARY
            label.TextSize = 12
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextWrapped = true
            label.Font = Enum.Font.Gotham
            label.Parent = self._elementsFrame
            
            return {
                Set = function(text)
                    label.Text = text
                end
            }
        end
        
        function Tab:AddParagraph(options)
            options = options or {}
            local title = options.Title or "Paragraph"
            local content = options.Content or "Content"
            
            local paragraphFrame = Instance.new("Frame")
            paragraphFrame.Size = UDim2.new(1, 0, 0, 50)
            paragraphFrame.BackgroundTransparency = 1
            paragraphFrame.Parent = self._elementsFrame
            
            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 18)
            titleLabel.BackgroundTransparency = 1
            titleLabel.Text = title
            titleLabel.TextColor3 = COLORS.TEXT_PRIMARY
            titleLabel.TextSize = 13
            titleLabel.TextXAlignment = Enum.TextXAlignment.Left
            titleLabel.Font = Enum.Font.GothamBold
            titleLabel.Parent = paragraphFrame
            
            local contentLabel = Instance.new("TextLabel")
            contentLabel.Size = UDim2.new(1, 0, 1, -20)
            contentLabel.Position = UDim2.new(0, 0, 0, 20)
            contentLabel.BackgroundTransparency = 1
            contentLabel.Text = content
            contentLabel.TextColor3 = COLORS.TEXT_SECONDARY
            contentLabel.TextSize = 11
            contentLabel.TextXAlignment = Enum.TextXAlignment.Left
            contentLabel.TextWrapped = true
            contentLabel.Font = Enum.Font.Gotham
            contentLabel.Parent = paragraphFrame
            
            return {
                Set = function(newTitle, newContent)
                    titleLabel.Text = newTitle or title
                    contentLabel.Text = newContent or content
                end
            }
        end
        
        -- Add tab to window
        table.insert(self._tabs, Tab)
        if #self._tabs == 1 then
            self._currentTab = Tab
        end
        
        -- Update nav container canvas size
        self._navLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            self._navContainer.CanvasSize = UDim2.new(0, 0, 0, self._navLayout.AbsoluteContentSize.Y + 20)
        end)
        
        return Tab
    end
    
    function Window:Minimize()
        if not self._isMinimized then
            TweenService:Create(self._mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = UDim2.new(0, 200, 0, 35)
            }):Play()
            self._isMinimized = true
        else
            TweenService:Create(self._mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = UDim2.new(0, 550, 0, 380)
            }):Play()
            self._isMinimized = false
        end
    end
    
    function Window:Destroy()
        self._screenGui:Destroy()
    end
    
    return Window
end

-- Notification function
function NovaLib:MakeNotification(options)
    options = options or {}
    local title = options.Title or "Notification"
    local content = options.Content or "This is a notification"
    local image = options.Image or ""
    local time = options.Time or 5
    
    createNotification(title, content, time)
end

-- Return library
return NovaLib
